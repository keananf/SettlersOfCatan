import org.gradle.plugins.ide.eclipse.model.SourceFolder

/*
 * Declare Gradle plugins
 */
buildscript { repositories { jcenter() } }

plugins {
    id "java"
    id "com.google.protobuf" version "0.8.1"
    id "com.diffplug.gradle.spotless" version "3.0.0"
}

// ========================================================================= //
// ==== PROJECT: ALL ======================================================= //
// ========================================================================= //

allprojects {
    apply plugin: "eclipse"
    apply plugin: "idea"

    version = '1.0'
    ext {
        appName = "Settlers of Catan"
        gdxVersion = '1.9.5'
        aiVersion = '1.8.0'
        protobufVersion = "3.2.0"
        junitVersion = "4.12"
    }

    repositories { jcenter() }
}

// ========================================================================= //
// ==== PROJECT: DESKTOP =================================================== //
// ========================================================================= //

project(":desktop") {
    apply plugin: "java"

    dependencies {
        compile project(":core")
        compile "com.badlogicgames.gdx:gdx-backend-lwjgl3:$gdxVersion"
        compile "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-desktop"
        compile "com.badlogicgames.gdx:gdx-tools:$gdxVersion"
    }
}

// ========================================================================= //
// ==== PROJECT: CORE ====================================================== //
// ========================================================================= //

project(":core") {
    apply plugin: "java"
    apply plugin: "com.google.protobuf"
    apply plugin: "com.diffplug.gradle.spotless"
    apply plugin: 'findbugs'

    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xlint:all"
    }

    dependencies {
        compile "com.badlogicgames.gdx:gdx:$gdxVersion"
        compile "com.badlogicgames.gdx:gdx-ai:$aiVersion"
        compile "com.google.protobuf:protobuf-java:$protobufVersion"
        testCompile "junit:junit:$junitVersion"
    }

    // ======================================= //
    // ==== CODE FORMATTING ================== //
    // ======================================= //

    spotless {
        java {
            eclipseFormatFile("../config/format.xml")
            removeUnusedImports()
            paddedCell()
        }
    }

    // ======================================= //
    // ==== JAVADOC ========================== //
    // ======================================= //

    javadoc.destinationDir = file("${project.rootDir}/doc")

    // ======================================= //
    // ==== PROTOCOL BUFFERS ================= //
    // ======================================= //

    protobuf {
        generatedFilesBaseDir = "$projectDir/gen"
        protoc {
            artifact = "com.google.protobuf:protoc:$protobufVersion"
        }
    }

    clean {
        delete protobuf.generatedFilesBaseDir
    }

    idea {
        module {
            sourceDirs += file("${protobuf.generatedFilesBaseDir}/main/java");
        }
    }

    eclipse {
        classpath {
            file.beforeMerged {
                cp -> cp.entries.add(new SourceFolder("${protobuf.generatedFilesBaseDir}/main/java", null))
            }
        }
    }

    tasks.withType(FindBugs) {
        reports {
            xml.enabled = false
            html.enabled = true
        }
        effort = "max"
        reportLevel = "low"
        ignoreFailures = true
        classes = classes.filter {
            !it.path.contains("intergroup");
        }
    }

    // ========================================//
    // ==== FBX (3D models) ================== //
    // ======================================= //

    task fbx << {
        FileTree inputFiles = sourceSets.getByName("main").resources
        PatternSet fbxFiles = new PatternSet().include({ def f -> f.getName().endsWith(".fbx") })
        inputFiles.matching(fbxFiles).each { f ->
            String out = (String)projectDir + "/assets/models/" + f.getName().replace(".fbx", ".g3db")
            exec {
                environment "LD_LIBRARY_PATH", "bin"
                commandLine "./bin/fbx-conv-lin64", "${f}", "${out}"

            }
            println "Converted ${f} to ${out}"
        }
    }
}


tasks.eclipse.doLast {
    delete ".project"
}
